# This policy uses the Sentinel tfplan import to require that
# all Azure VMs have vm sizes from an allowed list

##### Imports #####

import "tfplan"
import "strings"

##### Parameters #####

param resource_group_name

print("Using the following parameters", "{resource_group_name}", resource_group_name)

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(attribute) {

	resources = {}

	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over all resources in the module
		for tfplan.module(path).resources else {} as type_name, resource_types {
			# Iterate over resource instances (count)
			for resource_types as name, type_instances {
				for type_instances as index, r {
					# Check if resource has a resource_group_name attribute, if not, filter out
					if r.applied[attribute] else null is null {
						continue
					}
					# Get the address of the instance
					if length(path) == 0 {
						# root module
						address = type_name + "." + name + "[" + string(index) + "]"
					} else {
						# non-root module
						address = "module." + strings.join(path, ".module.") + "." +
							type_name +
							"." +
							name +
							"[" +
							string(index) +
							"]"
					}

					# Add the instance to resources map, setting the key to the address
					resources[address] = r
				}
			}
		}
	}

	return resources
}

# Validate that all instances of a specified resource type being modified have
# a specified top-level attribute in a given list
validate_attribute = func(attribute, allowed_value) {

	validated = true

	# Get all resource instances of the specified type
	resource_instances = find_resources_from_plan(attribute)

	# Loop through the resource instances
	for resource_instances as address, r {
		# Skip resource instances that are being destroyed
		# to avoid unnecessary policy violations.
		# Used to be: if length(r.diff) == 0
		if r.destroy and not r.requires_new {
			print("Skipping resource", address, "that is being destroyed.")
			continue
		}

		if r.applied[attribute] else "" not in allowed_value {
			print("Resource attribute ",strings.join([address, attribute], "."), "was set to",
				r.applied[attribute] else "", "and should be", allowed_value)
			validated = false
		}
	}
	return validated
}

##### Rules #####

# Calls the validation function
resources_validated = validate_attribute("resource_group_name", resource_group_name)

# Main rule
main = rule {
	resources_validated
}
