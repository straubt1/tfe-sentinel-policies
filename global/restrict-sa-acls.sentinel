# This policy does stuff

##### Imports #####

import "tfplan"
import "strings"

##### Parameters #####

param allowed_ip_addresses default [
	"100.0.0.1",
	"100.0.0.2",
	"100.0.0.3",
]

print("Using the following parameters", "{allowed_ip_addresses}", allowed_ip_addresses)

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

	resources = {}

	# Iterate over all modules in the tfplan import
	for tfplan.module_paths as path {
		# Iterate over the named resources of desired type in the module
		for tfplan.module(path).resources[type] else {} as name, instances {
			# Iterate over resource instances
			for instances as index, r {

				# Get the address of the instance
				if length(path) == 0 {
					# root module
					address = type + "." + name + "[" + string(index) + "]"
				} else {
					# non-root module
					address = "module." + strings.join(path, ".module.") + "." +
						type +
						"." +
						name +
						"[" +
						string(index) +
						"]"
				}

				# Add the instance to resources map, setting the key to the address
				resources[address] = r
			}
		}
	}

	return resources
}

# Validate that all instances of a specified resource type being modified have
# a specified top-level attribute in a given list
validate_attribute_in_list = func(type, allowed_ip_addresses) {

	validated = true

	# Get all resource instances of the specified type
	resource_instances = find_resources_from_plan(type)

	# Loop through the resource instances
	for resource_instances as address, r {

		# Skip resource instances that are being destroyed
		# to avoid unnecessary policy violations.
		# Used to be: if length(r.diff) == 0
		if r.destroy and not r.requires_new {
			print("Skipping resource", address, "that is being destroyed.")
			continue
		}
		
		for r.applied.network_rules[0].ip_rules as _, ip_rule {
			if ip_rule not in allowed_ip_addresses {
				print("Resource", address, "has attribute a public IP with value",
					ip_rule else "",
					"that is not in the allowed list:", allowed_ip_addresses)
				validated = false
			}
		}
	}
	return validated
}

##### Rules #####

# Calls the validation function
vms_validated = validate_attribute_in_list("azurerm_storage_account", allowed_ip_addresses)

# Main rule
main = rule {
	vms_validated
}
